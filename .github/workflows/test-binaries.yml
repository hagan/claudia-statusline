name: Test Binary Compatibility

on:
  workflow_run:
    workflows: ["Build Binaries"]
    types:
      - completed
  workflow_dispatch:

jobs:
  test-linux-binary:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64]  # GitHub Actions doesn't easily support ARM64 runners

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts from build
      if: github.event.workflow_run
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: ${{ github.event.workflow_run.id }}
          });
          const matchArtifact = artifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "statusline-linux-${{ matrix.arch }}"
          })[0];

          if (!matchArtifact) {
            core.setFailed(`No artifact found with name: statusline-linux-${{ matrix.arch }}`);
            return;
          }

          const download = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: matchArtifact.id,
            archive_format: 'zip',
          });
          const fs = require('fs');
          fs.writeFileSync('artifacts.zip', Buffer.from(download.data));

    - name: Extract downloaded artifacts
      if: github.event.workflow_run
      run: |
        mkdir -p artifacts
        unzip artifacts.zip -d artifacts/
        rm artifacts.zip

    - name: Build binary if not from workflow
      if: ${{ !github.event.workflow_run }}
      run: |
        cargo build --release --target x86_64-unknown-linux-gnu
        mkdir -p artifacts
        tar czf artifacts/statusline-linux-amd64.tar.gz -C target/x86_64-unknown-linux-gnu/release statusline

    - name: Extract and test binary
      run: |
        cd artifacts
        tar xzf statusline-linux-${{ matrix.arch }}.tar.gz
        chmod +x statusline

        # Test version flag
        ./statusline --version

        # Test help flag
        ./statusline --help

        # Test basic functionality
        echo '{"workspace":{"current_dir":"/tmp"}}' | ./statusline

        # Test with all features
        echo '{"workspace":{"current_dir":"/tmp"},"model":{"display_name":"Claude"},"cost":{"total_cost_usd":5.0}}' | ./statusline

    - name: Test binary size and properties
      run: |
        cd artifacts

        # Check file type
        file statusline | grep -E "ELF 64-bit|x86-64"

        # Check binary is stripped
        ! nm statusline 2>/dev/null || echo "Binary is properly stripped"

        # Check dependencies (should have minimal deps due to static linking)
        ldd statusline || echo "Statically linked"

        # Verify size is reasonable
        size=$(stat -c%s statusline)
        echo "Binary size: $size bytes"
        if [ $size -gt 5242880 ]; then  # 5MB limit
          echo "Binary too large!"
          exit 1
        fi

  test-macos-binary:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.arch == 'amd64' && 'x86_64-apple-darwin' || 'aarch64-apple-darwin' }}

    - name: Build binary
      run: |
        target="${{ matrix.arch == 'amd64' && 'x86_64-apple-darwin' || 'aarch64-apple-darwin' }}"
        cargo build --release --target $target
        mkdir -p artifacts
        tar czf artifacts/statusline-darwin-${{ matrix.arch }}.tar.gz -C target/$target/release statusline

    - name: Extract and test binary (if native arch)
      if: (matrix.arch == 'amd64' && runner.arch == 'X64') || (matrix.arch == 'arm64' && runner.arch == 'ARM64')
      run: |
        cd artifacts
        tar xzf statusline-darwin-${{ matrix.arch }}.tar.gz
        chmod +x statusline

        # Test basic functionality
        ./statusline --version
        echo '{"workspace":{"current_dir":"/tmp"}}' | ./statusline

    - name: Verify universal binary compatibility
      run: |
        cd artifacts
        tar xzf statusline-darwin-${{ matrix.arch }}.tar.gz

        # Check file type
        file statusline | grep -E "Mach-O|executable"

        # Check architecture
        lipo -info statusline 2>/dev/null || file statusline

        # Verify code signing (if applicable)
        codesign -v statusline 2>/dev/null || echo "Not code signed"

  test-windows-binary:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Build binary
      run: |
        cargo build --release --target x86_64-pc-windows-msvc
        New-Item -ItemType Directory -Force -Path artifacts
        Compress-Archive -Path target\x86_64-pc-windows-msvc\release\statusline.exe -DestinationPath artifacts\statusline-windows-amd64.zip

    - name: Extract and test binary
      shell: powershell
      run: |
        cd artifacts
        Expand-Archive -Path statusline-windows-amd64.zip -DestinationPath . -Force

        # List files to debug
        Get-ChildItem -Recurse | Select-Object FullName

        # Test version flag
        .\statusline.exe --version

        # Test help flag
        .\statusline.exe --help

        # Test basic functionality
        echo '{"workspace":{"current_dir":"C:\\temp"}}' | .\statusline.exe

        # Test with features
        echo '{"workspace":{"current_dir":"C:\\temp"},"model":{"display_name":"Claude"},"cost":{"total_cost_usd":5.0}}' | .\statusline.exe

    - name: Check binary properties
      shell: powershell
      run: |
        cd artifacts

        # Check if file exists
        if (Test-Path statusline.exe) {
          # Get file info
          $file = Get-Item statusline.exe
          Write-Host "File size: $($file.Length) bytes"

          # Check if it's a valid PE executable
          try {
            $bytes = [System.IO.File]::ReadAllBytes("statusline.exe")
            if ($bytes[0] -eq 0x4D -and $bytes[1] -eq 0x5A) {
              Write-Host "Valid PE executable"
            } else {
              Write-Host "Invalid executable format"
              exit 1
            }
          } catch {
            Write-Host "Warning: Could not read executable for validation"
            Write-Host "Error: $_"
            # Don't fail the build for this
          }
        } else {
          Write-Host "Warning: statusline.exe not found in expected location"
          Get-ChildItem -Recurse | Select-Object FullName
        }

  test-installation-script:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Test installation script syntax
      run: |
        bash -n scripts/install-statusline.sh
        bash -n scripts/uninstall-statusline.sh

    - name: Test dry-run mode
      run: |
        ./scripts/install-statusline.sh --dry-run --skip-build

    - name: Test help output
      run: |
        ./scripts/install-statusline.sh --help
        ./scripts/uninstall-statusline.sh --help

    - name: Create mock universal installer
      run: |
        cat > test-install.sh << 'EOF'
        #!/bin/bash
        set -e

        # Mock version for testing
        VERSION="v2.2.0"

        # Detect OS and architecture
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)

        case "$OS" in
          linux) OS="linux" ;;
          darwin) OS="darwin" ;;
          *) echo "Unsupported OS: $OS"; exit 1 ;;
        esac

        case "$ARCH" in
          x86_64) ARCH="amd64" ;;
          aarch64|arm64) ARCH="arm64" ;;
          *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
        esac

        echo "Would download: statusline-${OS}-${ARCH}.tar.gz"
        echo "Version: $VERSION"
        EOF

        chmod +x test-install.sh
        ./test-install.sh

  validate-checksums:
    runs-on: ubuntu-latest
    if: github.event.workflow_run

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Validate checksums
      run: |
        if [ ! -d artifacts ]; then
          echo "No artifacts directory found - nothing to validate"
          exit 0
        fi

        cd artifacts

        if [ -z "$(ls -A)" ]; then
          echo "Artifacts directory is empty - nothing to validate"
          exit 0
        fi

        # For each archive, verify its checksum
        for dir in */; do
          if [ -d "$dir" ] && [ -f "$dir"*.tar.gz ]; then
            cd "$dir"
            if [ -f *.sha256 ]; then
              sha256sum -c *.sha256
              echo "âœ“ Checksum valid for $dir"
            fi
            cd ..
          fi
        done